// deep copy
#include <iostream>
using namespace std;


class deep
{
private:
int length;
int* breadth;
int height;

public:
deep()
{
breadth = new int;
}
void set_dimension(int l, int b,int h)
{
length = l;
*breadth = b;
height = h;
}
void show_data()
{
cout << " Length = " << length
<< "\n Breadth = " << *breadth
<< "\n Height = " << height
<< endl;
}
deep(deep& sample)
{
length = sample.length;
breadth = new int;
*breadth = *(sample.breadth);
height = sample.height;
}

// Destructors
~box()
{
delete breadth;
}
};
int main()
{
box first;
first.set_dimension(12, 14, 16);
first.show_data();
deep second = first;
second.show_data();
return 0;
}




















//shalllow
#include <iostream>
using namespace std;
class shall
{
private:
int length;
int breadth;
int height;

public:
void set_dimensions(int length1, int breadth1,int height1)
{
length = length1;
breadth = breadth1;
height = height1;
}
void show_data()
{
cout << " Length = " << length
<< "\n Breadth = " << breadth
<< "\n Height = " << height
<< endl;
}
};
int main()
{
shall B1, B3;
B1.set_dimensions(14, 12, 16);
B1.show_data();
shall B2 = B1;
B2.show_data();
B3 = B1;
B3.show_data();
return 0;
}
